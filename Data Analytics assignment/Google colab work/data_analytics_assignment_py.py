# -*- coding: utf-8 -*-
"""data_analytics_assignment.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YonVNjLA0ZEREvHQ92T5w3DZWM-QMUm6

# **Task 1 -**
Do you have any experience or knowledge about web scraping? If yes, then Please find all
the colleges email id in Mumbai region.

 A-(Data Collection), B- Survey
"""

pip install PyPDF2

import re
import requests
from io import BytesIO
from PyPDF2 import PdfReader

#URL of the PDF file
url = "https://old.mu.ac.in/wp-content/uploads/2012/01/Updated-All-College-List-with-Course-Detailss.pdf"

# Send a GET request to fetch the PDF content
response = requests.get(url)

# Check if the request was successful
if response.status_code == 200:
    # Load the PDF content into PyPDF2
    pdf_file = BytesIO(response.content)
    reader = PdfReader(pdf_file)

    # Extract text from each page and search for email addresses
    emails = set()
    for page in reader.pages:
        text = page.extract_text()
        emails.update(re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", text))

    # Display the extracted email addresses
    print("Extracted Emails:")
    for email in emails:
        print(email)
else:
    print(f"Failed to fetch the PDF. Status code: {response.status_code}")

"""# **Task 2 - Data Cleaning**

(Implement all the steps in excel and last 3 steps should be
implemented in both Python & Excel):
• Identify and eliminate any duplicate entries in the dataset. (Based on Emails)
• Remove Null Values from data
• Extract data where designation is student.
"""

import pandas as pd
# Load dataset
df = pd.read_csv('/content/Data(All Events Data)-Input File.csv')

df.head()

"""**Convert Family Income Range into Mean**"""

# Function to convert income range to mean
def convert_income_to_mean(income_range):
    if isinstance(income_range, str):  # Check if the value is a string
        if '0-2 Lakh' in income_range:
            return 1  # Mean of 0-2 Lakh is 1 (Lakh)
        elif '2-5 Lakh' in income_range:
            return 3.5
        elif '5-7 Lakh' in income_range:
            return 6
        elif '7 Lakh+' in income_range:
            return 7
        else:
            return None
    return None

df['Income Mean'] = df['Family Income'].apply(convert_income_to_mean)

#DataFrame after converting income range to mean
print("DataFrame after converting Family Income to mean:")
print(df[['Family Income', 'Income Mean']].head())

"""**Clean Data (Remove Extra Spaces and Special Characters)**




"""

import pandas as pd
import re

# Function to clean a single value based on the column requirements
def clean_value(value, column):
    if pd.isnull(value):  # Handle NaN values
        return value
    value = str(value).strip()  # Remove leading and trailing spaces

    # Apply column-specific rules
    if column == "Email":
        # Allow alphanumeric characters, @ and .
        return re.sub(r"[^a-zA-Z0-9@.]", "", value)
    elif column == "Family Income":
        # Allow numbers, spaces, and minus sign (for ranges)
        return re.sub(r"[^0-9\s-]", "", value)
    elif column == "CGPA":
        # Allow numbers and period (.)
        return re.sub(r"[^0-9.]", "", value)
    elif column == "Year of Graduation":
        # Keep only the first 4 digits (valid year)
        return re.sub(r"\D", "", value)[:4]
    elif column == "Expected salary (Lac)":
        # Keep numeric values and period (.)
        value = re.sub(r"[^\d.]", "", value)
        return value  # Keep as it is, no changes
    elif column == "Income Mean":
        # No special cleaning for Income Mean column
        return value
    else:
        # For all other columns (except "Experience with python (Months)"), remove all special characters except alphanumeric and spaces
        if column != "Experience with python (Months)":
            return re.sub(r"[^a-zA-Z0-9\s]", "", value)
        return value  # No changes for "Experience with python (Months)"

# Assuming the dataframe 'df' is already loaded

# Apply the cleaning function to each column
for column in df.columns:
    df[column] = df[column].apply(lambda x: clean_value(x, column))

df.head()

"""**Combine Responses from "How did you come to know about this event?" into "Others"**



"""

# Strip extra spaces from column names to ensure they match correctly
df.columns = df.columns.str.strip()

# Combine the responses from 'How did you come to know about this event?'
# and 'Specify in "Others" (how did you come to know about this event)' columns
df['Others (After combining)'] = df['How did you come to know about this event?'].fillna('') + ' ' + df['Specify in "Others" (how did you come to know about this event)'].fillna('')

# Optionally, check the first few rows to verify the new column
print(df.head())

# Save the updated DataFrame to a new Excel file
df.to_excel('updated_file.xlsx', index=False)

print("New column 'Others (After combining)' has been added and saved to 'updated_file.xlsx'.")

print("Column names:", df.columns)

df.head()

import pandas as pd

total_students = len(df)

print(f"The total number of students is: {total_students}")